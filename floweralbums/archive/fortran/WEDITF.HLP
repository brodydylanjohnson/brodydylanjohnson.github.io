 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 ³ Copyright by WATCOM Systems Inc. 1988.  All rights reserved.  ³
 ³ No part of this publication may be reproduced in any form or  ³
 ³ by any means - graphic, electronic or mechanical, including	 ³
 ³ photocopying, recording, taping or information storage and	 ³
 ³ retrieval systems - except for its intended use with the	 ³
 ³ WATCOM Editor.						 ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

All help topics must be stored in order of the ASCII collating sequence.
Each topic is identified by a header consisting of a string of 4 colons
followed by the topic name.  Any alphabetic characters must be entered in
upper-case.  Use the WATCOM Editor COMPRESS utility to reduce the size of
this file after it has been edited.
::::!

   Syntax:	! <text>

   Description: The "comment" command ("!") may be used to document editor
		command files.	The argument "<text>" is ignored.  See the
		description of the "@" command for more information on command
		files.

   Examples:	! The following lines define some Alternate Function keys.
		! Any text after a ! is ignored.
::::#

   Syntax:	<line-id>#

   Description: The "number-sign" command ("#") displays the line number of
		the specified line.  Lines are numbered in the workspace
		starting at 1.	The "nth" line in a workspace has line
		number "n".  The "<beginning of file>" line is line number 0
		in the workspace.

   Examples:	$#	    Position to the last line in the workspace
			    and report its line number.
		-100#	    Position back one hundred lines in the
			    workspace and report the new line number.
		#	    Report the line number of the current line.
::::=

   Syntax:	=

   Description: The "equal-sign" command ("=") repeats the last command.
::::?

   Syntax:	?

   Description: The "question-mark" command ("?") recalls the last command so
		that it may be altered and resubmitted.
::::@

   Syntax:	@ <file-name>

   Description: The "indirection" command ("@") causes the editor commands
		stored in the specified file to be executed.  The commands
		are executed without pause until end-of-file is reached.

		The editor will search the directories listed in the DOS
		"PATH" for a command file if one cannot be located in the
		current directory.  If this search is unsuccessful, the editor
		will retry the search using a default file extension of
		".EDI".  Thus editor command files may be grouped under
		specific directories and can be identified by the ".EDI"
		extension.

		The editor automatically executes an indirection command at
		start-up time.	The WATCOM Editor uses the file "WEDIT.PRF".
		The "profile" file need not exist.  This feature allows you to
		store a command or commands in the "profile" file which will
		be automatically executed when the editor is started.  The
		following table summarizes the names of the profile files for
		each software package.

		Program Name  Software Product	  Profile Filename
		------------  ----------------	  ----------------
		WBAS.EXE      WATCOM BASIC	  WBAS.PRF
		WEDITC.EXE    WATCOM C		  WEDITC.PRF
		WCOB.EXE      WATCOM COBOL	  WCOB.PRF
		DEDIT.EXE     WATCOM Disk Editor  WEDIT.PRF
		WEDIT.EXE     WATCOM Editor	  WEDIT.PRF
		WEDITC.EXE    WATCOM Express C	  WEDITC.PRF
		WPAS.EXE      WATCOM Pascal	  WPAS.PRF
		WEDITF.EXE    WATFOR-77 	  WEDITF.PRF

		The editor normally executes the "profile" file first and then
		loads the file specified on the command line.  Sometimes it may
		be advantageous to execute "profile" commands after the file
		has been loaded.  The editor will suspend execution of the
		"profile" file if it encounters a BYE, CANCEL, DONE, EXIT or
		QUIT command in the input stream.  It will then load the file
		named on the command line and then resume execution of the
		remainder of the "profile" file.
::::APPEND

   Syntax:	<line-range>APPend <file-name>

   Description: The APPEND command copies all the lines specified by the
		<line-range> to the end of the file specified by
		<file-name>.  If <line-range> is not specified then only the
		current line is appended to the specified file.

   Examples:	append collect
			    Append the current line to the file
			    named "collect".
		.,.+2app group
			    Append the 3 lines identified by the line-
			    range to the file named "group".
		*/integer/app decls.fil
			    Append all lines containing the word "integer"
			    to the file "decls.fil".  Previous contents of
			    "decls.fil" are not changed.
::::AUTOSAVE

   Syntax:	AUTosave <minutes>

   Description: The AUTOSAVE command is used to control automatic saving of the
		workspace to disk.  Each workspace that is created has a unique
		"AUTOSAVE.nnn" file associated with it.  The extensions start
		at 0 and increase each time a new workspace is created (i.e.,
		AUTOSAVE.0, AUTOSAVE.1, etc.).	When the AUTOSAVE command is
		issued, the numeric argument is the interval in minutes for
		which the editor will periodically save modified workspaces.

		For example, "AUTOSAVE 5" requests that workspaces be saved
		every 5 minutes.  Only workspaces that have been modified since
		the last save are written to disk.  Thus workspaces "1", "5",
		and "7" will be written to "AUTOSAVE.1", "AUTOSAVE.5", and
		"AUTOSAVE.7" if they were changed any time within the last 5
		minutes.  Workspaces are saved asynchronously.	It may occur
		while you are typing or while the system is unattended.
		Autosave files are written to the current directory.

		When a workspace is deleted, the corresponding "AUTOSAVE.nnn"
		file is erased.  This will happen when a BYE, DONE, EXIT, or
		QUIT command is issued or a workspace is erased (*del) and
		abandoned for another.	If a CANCEL command is issued, no
		"AUTOSAVE.nnn" files are erased.

		Any time an editor SYSTEM command is issued, all workspaces
		will be written to autosave files regardless of the use of the
		AUTOSAVE command.  This protects you from loss of data should
		the program that is run from "SYSTEM" hang the Personal
		Computer.

		Disaster Recovery: In the event of a system crash or
		    accidental destruction of a workspace, it is the user's
		    responsibility to immediately safeguard any autosave files
		    that should be retained by renaming them before starting
		    up the next editing session.

		If <minutes> is 0 then no autosaving is done (except when the
		SYSTEM command is used).  The current setting of the time
		interval can be determined by simply entering the command:
		AUTOSAVE.

   Examples:	autosave 10    Set the automatic saving to occur every 10
			       minutes.
		auto	       Determine the autosave interval.
		autos	 0     Turn off the autosave feature.
::::BACKUP

   Syntax:	BACkup <ON|OFF>

   Description: The BACKUP ON command will cause the editor to retain
		one level of file backup whenever you write a file ("put",
		"print", or "exit").  If the output file name is "filename.ext"
		then "filename.BKP" is erased and the existing disk file
		"filename.ext" is renamed to "filename.BKP".  The output file
		"filename.ext" is then written.

		The BACKUP OFF command will prevent the editor from creating
		file backups.

		The current setting is displayed when no argument is
		specified.  The default setting is OFF.

   Examples:	backup on
		    This will cause the editor to create file backups.
		bac off
		    This will prevent the editor from creating file backups.
		back
		    Display the current setting of the backup option.
::::BELL

   Syntax:	BELl <column>

   Description: The BELL command will cause the editor to issue an audible
		alarm (a beep) whenever the cursor moves from column <column>
		into column <column>+1.  If <column> is not specified then the
		current setting is displayed.

   Example:	bell 72

		This will cause the editor to issue an audible alarm (a beep)
		whenever the cursor moves from column 72 into column 73.
::::BIND

   Syntax:	BINd <function-name> <key-name> <icon>

   Description: The BIND command causes the editing function identified by
		<function-name> to be bound to the key identified by
		<key-name>.  A 1 to 4 character icon may also be specified.
		The icon will replace the default one supplied by the editor
		(when an icon is not specified, the editor will supply a
		default).

		The following is an alphabetically ordered list of the names
		of the editing functions.

		    ADD_WINDOW	   BACKGROUND	  BORDER	 COMMAND
		    CUT 	   DEL_LINE	  DEL_WINDOW	 DITTO
		    DONE	   EOF		  EXECUTE	 FILL_TEXT
		    FIND	   FIND_NEXT	  FIND_PREV	 FOREGROUND
		    GROW	   HALF_DOWN	  HALF_UP	 HELP
		    INS_LINE	   LINES	  LINE_DOWN	 LINE_LEFT
		    LINE_RIGHT	   LINE_UP	  MODE		 NAMES
		    NEXT_INDENT    NEXT_WINDOW	  PAGE_DOWN	 PAGE_UP
		    PASTE	   PREV_INDENT	  PREV_WINDOW	 REFRESH
		    SELECT	   SHRINK	  SWITCH	 TOF
		    UNDEL_LINE

		The following are names for the keys found on the IBM PC
		keyboard.  These names can be used in the Editor "BIND"
		command.  The "BIND" command permits you to bind an editing
		function (e.g., HELP, INS_LINE, etc.) to any of the keys
		named below.

		    F1		 END	      CTRL_F4	   CTRL_CURLEFT
		    F2		 CURDOWN      CTRL_F5	   CTRL_CURRIGHT
		    F3		 PGDN	      CTRL_F6	   CTRL_END
		    F4		 INS	      CTRL_F7	   CTRL_PGDN
		    F5		 DEL	      CTRL_F8	   CTRL_HOME
		    F6		 SHIFT_F1     CTRL_F9	   ALT_1
		    F7		 SHIFT_F2     CTRL_F10	   ALT_2
		    F8		 SHIFT_F3     ALT_F1	   ALT_3
		    F9		 SHIFT_F4     ALT_F2	   ALT_4
		    F10 	 SHIFT_F5     ALT_F3	   ALT_5
		    HOME	 SHIFT_F6     ALT_F4	   ALT_6
		    CURUP	 SHIFT_F7     ALT_F5	   ALT_7
		    PGUP	 SHIFT_F8     ALT_F6	   ALT_8
		    MINUS	 SHIFT_F9     ALT_F7	   ALT_9
		    CURLEFT	 SHIFT_F10    ALT_F8	   ALT_0
		    FIVE	 CTRL_F1      ALT_F9	   ALT_MINUS
		    CURRIGHT	 CTRL_F2      ALT_F10	   ALT_EQUAL
		    PLUS	 CTRL_F3      CTRL_PRTSC   CTRL_PGUP

		The following are names for additional keys found on the IBM
		Enhanced keyboard.

		    F11 	 CTRL_CURUP   CTRL_SLASH   ALT_CURDOWN
		    F12 	 CTRL_MINUS   CTRL_AST	   ALT_PGDN
		    SHIFT_F11	 CTRL_FIVE    ALT_HOME	   ALT_INS
		    SHIFT_F12	 CTRL_PLUS    ALT_CURUP    ALT_DEL
		    CTRL_F11	 CTRL_CURDOWN ALT_PGUP	   ALT_SLASH
		    CTRL_F12	 CTRL_INS     ALT_CURLEFT  ALT_TAB
		    ALT_F11	 CTRL_DEL     ALT_CURRIGHT ALT_ENTER
		    ALT_F12	 CTRL_TAB     ALT_END

   Example:	bind PAGE_UP   F1 Pg
		bind PAGE_DOWN F2 Pg

		The PAGE_UP editing function is bound to the F1 function key
		and the PAGE_DOWN editing function is bound to the F2
		function key.  Optional icons were also specified and will
		replace the icons usually displayed for these editing
		functions.

		bind HELP SHIFT_F10

		The HELP editing function is bound to the Shift/F10 function
		key.  No icon was specified so a default is supplied.
::::BYE

   Syntax:	BYE

   Description: The BYE command is used to leave the current workspace.  The
		next workspace is entered.  If there are no more workspaces
		then the editor returns to the system.

		If the workspace has been altered but not stored in a file
		since the alteration then the user is so informed and must
		either save the workspace in a file or use the QUIT command.
::::CANCEL

   Syntax:	CANcel

   Description: The CANCEL command is used to exit from the editor without
		saving any workspaces.

		If any workspace has been altered but not stored in a file
		since the alteration then the workspace will be lost.
::::CHANGE

   Syntax:	<line-range>Change/text1/text2/
		<line-range>Changen/text1/text2/
		<line-range>Change*/text1/text2/
		<line-id>Change

   Description: There are two fundamental types of CHANGE commands available in
		the editor.  The first, illustrated by the first three models
		above, changes the text denoted by "text1" to the text denoted
		by "text2" in all the lines denoted by the <line-range>.  The
		first form changes only the first occurrence of "text1" to
		"text2", whereas the second and third change the nth and all
		occurrences, respectively.  The second type of CHANGE command,
		illustrated by the fourth model above, allows screen editing of
		the current line.

   Examples:	c/a/b	    Change the first occurrence of "a" to "b"
			    in the current line.
		c*/y/z	    Change all occurrences of "y" to  "z" in
			    the current line.
		.,$c*/ctr/counter
			    Change all occurrences of "ctr" to "counter"
			    from the current line to the end of the file.
		c/abc/abc%/def
			    Change the first occurrence of "abc" to
			    "abc/def" in the current line.
		c/disk/%&=%&
			    Change the first occurrence of "disk" to
			    "disk=disk" in the current line.
::::COMPRESS

   Syntax:	COMpress <ON|OFF>

   Description: The COMPRESS ON command will cause the editor to compress
		records as they are written to a file.	Record compression
		consists of replacing sequences of 2 or more SPACE characters
		by an equivalent sequence of TAB and SPACE characters.
		In PC DOS, a TAB character causes movement to the next multiple
		of 8 columns (the n'th TAB moves to column n*8 + 1).

		The COMPRESS OFF command will prevent the editor from
		compressing records as they are written to a file.  Any TAB
		characters that were in the file are replaced by an equivalent
		sequence of SPACE characters.  The initial setting is "OFF".

		The current setting is displayed when no argument is
		specified.

   Examples:	compress on
		    This will cause the editor to compress output records.
		comp off
		    This will prevent the editor from compressing output
		    records.
		comp
		    Display the current setting of the compression option.
::::CSET

   Syntax:	CSET <colour-mode-options>

   Description: This program may be used to set screen colour and mode.  It
		may be run from the DOS command line.  In the editor, type
		"SYS CSET etc.".  CSET was written by WATCOM Systems Inc.
		and is provided on the editor diskette.

   Examples:	cset back blue fore yello bord red mode co80
		    Set background colour to blue, foreground colour to
		    yellow, border colour to red, and mode to 25 X 80 colour.
		cset back mag fore lt. green bord brown mode co40
		    Set background colour to magenta, foreground colour to
		    light green, border colour to brown, and mode to 25 X 40
		    colour.
		cset fore lt.green bord lt.green back black lines 28
		    Set foreground colour to light green, border colour to
		    light green, background colour to black, and the number of
		    screen lines to 28 (VGA only).
		cset
		    Set colours and mode interactively using pop-down menus.

   Note:	Foreground, background and border colours may also be changed
		using the editor's function keys Shift/F1 (foreground),
		Shift/F2 (background), and F11 (border - VGA only).
::::CURSOR

   Syntax:	CURsor <start> <end> <blink_attr>

   Description: The CURSOR command allows you to define the dimensions of the
		text cursor.
		<start> is the starting row for the cursor.
		<end>	is the ending row for the cursor.
		<blink_attr> is an optional cursor blink attribute which
			is 0 for "no blink" and 1 for "blink".	This feature
			is not supported on all IBM personal computers.

		When the editor starts up, it retains the current cursor
		setting.  There may be instances where the current cursor is
		invisible or a different cursor shape is desired.  The CURSOR
		command may be used to alter the current cursor shape.	Valid
		arguments to this command will depend on the type of
		monitor/adapter and character font in use.  Some start/end
		values may not be supported or may cause unpredictable results.
		Consult your adapter reference manual for valid cursor
		start/end values for your type of monitor/adapter.

		In most cases, the size of the "insert" cursor is computed by
		dividing the cursor end value by 2 and adding 1.  Therefore,
		your choice of cursor end value should take this into
		consideration.

		The cursor shape is reset whenever the number of screen rows
		is changed in the editor.  The following table describes the
		cursor selected when the "screen rows" function key is used.

		Adapter  Rows  Cell Size  Cell Start/End
		  EGA	  25	  14	    06/07 (emulated)
		  EGA	  43	   8	    06/00 (non-emulated)
		  VGA	  25	  16	    14/15
		  VGA	  28	  14	    12/13
		  VGA	  50	   8	    06/07
		  MCGA	  25	  16	    07/07
		  MCGA	  40	  10	    04/04
		  MCGA	  50	   8	    03/03

   Examples:	cursor 0 7
		    Define a rectangular cursor that is 8 lines high.  If the
		    character cell size is 8 lines then this cursor will fill
		    the entire cell.
		curs 6 7
		    Define a small bar cursor that is 2 lines high.  If the
		    character cell size is 8 lines then this cursor will
		    occupy the bottom two lines of the cell.
		cursor
		    Turn on cursor if it is currently invisible.
		cursor 26 27 1
		    Define a small bar cursor that is 2 lines high and that
		    blinks for the IBM PS/55 personal computer.  If the
		    character cell size is 28 lines then this cursor will
		    occupy the bottom two lines of the cell.
::::CUT

   Syntax:	<line-range>CUT <ws-name>
		<line-range>CUT

   Description: The CUT command moves all the lines specified by <line-range>
		into the workspace specified by <ws-name>.  The previous
		contents of the destination workspace are destroyed.  If
		<line-range> is not specified then only the current line is
		moved.	If <ws-name> is not specified then the "scrap"
		workspace (".scrap.") is assumed.  It is illegal to "cut" any
		part of the current workspace into the current workspace.

   Examples:	cut temp    Move the current line into the workspace
			    named "temp".  The previous contents of the
			    workspace named "temp" are lost.
		.,.+2cut    Move the 3 lines identified by the line-range
			    into the "scrap" workspace.  The previous
			    contents of the "scrap" workspace are lost.
::::DATE

   Syntax:	DATe

   Description: The DATE command displays the current date and time.
::::DELETE

   Syntax:	<line-range>DElete

   Description: The DELETE command deletes all lines in the specified line
		range.

   Examples:	*del	    Delete all lines from the current workspace.
		1,10de	    Delete lines 1 through 10 inclusive from
			    the workspace.  Line 11 becomes line 1,
			    line 12 becomes line 2, etc.
		*/note/del  Delete all lines containing the string "note".
::::DIRECTORY

   Syntax:	DIrectory <directory-name>
		DIrectory <directory-name>  >  <file-name>

   Description: The DIRECTORY command lists the names of all the files that
		reside in the specified directory.  Any valid system
		directory specification is permitted.  DOS path ("\") and
		global filename characters ("*" and "?") are permitted
		within the directory name specification.  A "?" in the
		directory name indicates that any character can occupy that
		position.  A "*" means that any character can occupy that
		position and all remaining positions in the directory
		filename or extension.	If <file-name> is also specified
		then the directory listing is placed in the named file.

   Examples:	di	      List the current default directory.
		di b:*.bas    List all file names with a file extension
			      of "bas" that reside on the diskette in
			      the B drive.
		di c:basic    List the sub-directory "basic" of the "C:"
			      disk.
		di > LPT1:    List the default directory to the printer.
		di a: > directry.dat
			      List the directory of the "A:" disk to a
			      file called "directry.dat".
::::DONE

   Syntax:	DONe

   Description: The DONE command saves the current workspace to disk if it has
		been modified, removes the workspace, and moves on to the next
		workspace.  If there are no more workspaces, the editor
		terminates.
::::EDIT

   Syntax:	Edit <file-name>

   Description: The EDIT command allows you to edit another file or workspace.
		If <file-name> is specified then the editor searches all of
		your workspaces for a corresponding name.  If it does not find
		a workspace with the specified name then it attempts to
		locate a file on disk storage by that name and copy it into a
		new workspace.	The new workspace is given the name that you
		specified.

   Example:	ed demo   Edit a file named "demo".  Create a workspace named
			  "demo" and, if a file with that name exists, copy
			  the contents of that file into the workspace.
::::ERASE

   Syntax:	ERAse <file-name>

   Description: The ERASE command causes the named file to be deleted from the
		disk.  DOS path ("\") and global filename characters ("*" and
		"?") may be used to specify the names of files to be deleted.
		The pattern matching used by the ERASE command is the same as
		that used by DOS.  Caution should be used when specifying
		global filename characters since many files may be deleted.
		To see which files will be affected, use the DIRECTORY
		command together with the filename specification.

   Examples:	erase demo    Remove the file "demo".
		era *.tst     Remove from the DOS default disk all files
			      that have a file extension of "tst".
		eras b:*.old  Remove from the DOS "B:" disk all files
			      that have a file extension of "old".
::::EXIT

   Syntax:	EXit <file-name>

   Description: The EXIT command copies all the lines in the current
		workspace into the file specified by <file-name>.  If a
		filename is not specified then the current workspace name is
		assumed.  In the latter case, if the current filename is not
		defined (i.e.  ".no_name."), an error message is issued and
		the contents of the workspace are not stored on disk.

		If the file is written successfully then the current
		workspace is removed from the computer's memory.  The editor
		will move to the next workspace in the list as shown by the
		SHOW command.

   Examples:	ex demo     Put the entire workspace into the file name "demo".
			    If the file "demo" exists, the editor will ask
			    you to confirm the replacement of the file.  If
			    the file is successfully written then move to
			    another workspace if there is one; otherwise
			    return to the system.
		exit	    Put the entire workspace into a file whose name is
			    the same as the workspace name.  The previous
			    contents of a file on disk with that same name
			    are lost.  If successful then move to another
			    workspace if there is one; otherwise return to
			    the system.
::::EXPLANATIONS

			WATCOM Editor Messages
			ßßßßßßßßßßßßßßßßßßßßßß

 1. Not Understood
    The command is not understood by the editor.

 2. Missing operand
    A required element is missing from the command (e.g., rename x).

 3. Interrupted
    The editor command execution was interrupted using Ctrl/Break.  This
    message is also issued by workspace input/output commands when they are
    interrupted by a Ctrl/Break.  The file will have been partially read or
    written to disk so caution should be exercised.

 4. Illegal line range
    The specified range of lines is not correct (e.g., 7,3delete) or a line
    range was specified while line selection (F2) is active.

 5. Illegal search string
    The meta character sequence was invalid (e.g., c/%*/x).

 6. Search string not found
    The specified search string does not appear in the specified range of
    lines.

 7. Search string required
    A string is required and one was not specified (e.g., c:x:y).  It should
    appear between "/" characters.

 8. No search string defined
    A "/" command was entered before any search string was specified in an
    earlier command.

 9. No file name
    The workspace has not been given a name or a file name is required by the
    command.

10. %s - Lines transferred = %d
    Message issued by workspace input/output commands (%s represents a
    file name, %d represents an integer value).

11. %s1 - %s2. Lines transferred = %d
    Message issued by workspace input/output commands when an error occurs
    (%s1 represents a file name, %s2 represents a system error message, %d
    represents an integer value).

12. %s - %s
    Message issued by workspace input/output commands (%s represents an
    arbitrary string).

13. Not found
    The message is issued when string specified in a one-line CHANGE command
    is not present in the line.
    The same message is issued when the workspace specified in a PASTE
    command does not exist.

14. %d occurrences changed
    The message is issued by the CHANGE command to indicate how many
    occurrences of a string were changed.

15. Memory full
    This message is issued when there is no more room to edit the file.  The
    default workspace area for most versions of the editor is <= 64K bytes.
    To edit larger files, the WATCOM Disk-based Editor should be used
    (available from WATCOM).

16. Replacing string too long
    The message is issued by the CHANGE command to indicate that the replacing
    string causes the line to exceed the editor's record length (253 bytes).

17. Empty buffer
    This message is issued by output (and RUN) commands when there are no
    lines in the workspace.

18. Illegal cut or paste
    It is illegal to cut lines from the current workspace into the current
    workspace or paste the current workspace into itself.

19. Select active
    A global command (*/string/command) cannot be issued while line selection
    (F2) is active.

20. File modified - use QUIT to quit anyway
    A BYE command was issued but the workspace has been modified with saving
    it.  To quit without saving these changes on disk, the QUIT command may be
    used.

21. Replace existing file (No/Yes)?
    The specified command will replace an existing file on disk so
    confirmation is requested.

22. File "%s" not modified
    This message is issued in response to a "NO" reply to the "replace
    existing file" query.

23. Duplicate workspace name
    An attempt was used to name the current workspace with the same name
    as another workspace.

24. Replace file with subset (No/Yes)?
    Confirmation is requested that a subset of the current workspace is to be
    written to the default file.  Using the Select key or a line range
    specifies a subset of the entire workspace.

26. Can't set key
    The specified Alt/Function key cannot be set (either the number is not in
    the range 1 to 10 or the Alt/Function key buffer space is full).

27. cutting...
    This message is issued by the CUT command when it is running low on
    memory space.  Instead of cutting entire blocks of text, it must resort to
    cutting one line at a time.  This mode of cutting lines requires more time
    to complete.

28. Default
    This message is issued by the TABSET command when the default DOS tab
    interval is in effect (every 8 columns).

29. Busy...
    This message is issued whenever a file is read from or written to disk.

30. Word splitting occurred
    This message is issued by the FILL command when an item could not be placed
    within the specified left and right margins.  Items are split with a hyphen
    at an arbitrary place.

31. Invalid margins
    This message is issued by the FILL or PAGE commands when an invalid set
    of margins is specified.

32. Invalid indentation
    This message is issued by the FILL command when an invalid paragraph
    indentation is specified.

33. Ready page %d and press Enter to continue or Break to stop
    This message is issued by the PRINT command before each page is printed,
    allowing you to prepare a page in the printer.

34. Press Enter to resume editing
    This message is issued by the PRINT command when printing has completed.
    Printing may be directed to the screen in order to preview output for
    page breaks (e.g., PRINT CON).
::::FILL

   Syntax:	<line-range>Fill <lm> <rm> <in>

   Description: The FILL command causes the text within the specified line
		range to be "filled out" between the left and right margins.
		Essentially all the "words" (a word is any text separated by
		one or more spaces) within the specified line range are
		placed on one or more lines such that each line contains as
		many words as will fit between the left and right margins.
		The left and right margins and indentation for the first
		line may be specified in the FILL command.

   Examples:	.,+2f 10 60 5

		Fill the current line and the next two lines using a left
		margin of 10 and a right margin of 60.	The first line of the
		resulting lines will be indented right of the left margin by 5
		columns.

		.,+/end./f

		Fill all lines from the current line up to the line containing
		the string "end." using the currently established left margin,
		right margin and indentation settings.

		.,+/(2)/-1f 8 50 -4

		Fill all lines from the current line up to the line preceding
		the line containing the string "(2)" using a left margin of 8
		and a right margin of 50.  The first line of the resulting
		lines will be indented left of the left margin by 4 columns.
::::GET

   Syntax:	<line-id>Get <file-name>

   Description: The GET command causes the entire contents of the specified
		file to be inserted following the line specified by
		<line-id>.  A filename must be specified.  The GET command
		provides a convenient way of merging the contents of a
		second file with the one that you are editing.

   Examples:	$g demo       Insert the file named "demo" after the
			      last line in the current workspace.
		get example   Insert the file name "example" after the
			      current line in the workspace.
::::HELP

   Syntax:	Help <topic>

   Description: The HELP command may be used to obtain help on a particular
		topic.	If no <topic> is specified then a default topic is
		displayed.  This will include a list of the available topics.
		For help on editor commands, unique short forms may be used.
		If the short form is ambiguous, help is presented on the
		first topic found that matches.

		The HELP system will prompt with "Topic?" after displaying the
		requested information.	This permits you to access additional
		material without returning to the editor in between each
		request.  To return to the editor, simply press the Enter key
		in response to the "Topic?" prompt.

		Whenever the "Topic?" prompt appears, a mouse may be used to
		click on, or to the right of, any word displayed on the screen
		and the editor will search for a topic by that name.  In order
		to use this feature, the "MOUSE" command must have been issued.

		Normally, a default help file name is used by the editor.
		Using the DOS "SET" command, you may assign a different help
		file name to the "EDHELP" environment string and the editor
		will then use this name instead (e.g., C>SET EDHELP=XEDIT.HLP).

   Examples:	help	   List the default help topic on the screen.
		help edit  Help on the "edit" command is requested. Provided
			   that the "help" file is accessible, the "help"
			   topic will be displayed upon the screen.
		help ac    Help on the topic "ac" is requested.  If no help is
			   available on that topic, the message "Topic not
			   found" is displayed.
::::ICONS
			Editor Icons
			ßßßßßßßßßßßß
    Icons are used as a terse pictorial representation of the functions
    attached to the function keys.  The editor attaches special functions to
    most of the unshifted, shifted and Ctrl versions of function keys F1
    through F12 (F11 and F12 are on enhanced keyboards only).  In most cases, a
    command is available that does much the same thing as a function key
    (e.g., CUT, PASTE).  While it may take some time to learn what each of the
    functions do, the icons are provided as a small reminder.

    The icons appear on the last line of the screen.  Only the first 12 are
    shown and these describe the functions attached to the unshifted function
    keys.  To see the functions attached to Shift/F1 through Shift/F12, press
    down both Shift keys simultaneously.  To see the functions attached to
    Ctrl/F1 through Ctrl/F12, press down one of the Shift keys and one of the
    Ctrl keys simultaneously.

    When you are using a mouse (see the description of the MOUSE command) the
    icon line at the bottom of the screen takes on a more important role.  Each
    of the 20 icons forms a "hot spot" which can be clicked upon.  This is done
    by moving the mouse cursor to the icon and pressing and releasing the left
    mouse button.

    The editor permits you to respecify the binding of editing functions to
    keys through the use of the "BIND" command.  This command also permits you
    to respecify your own personal icons.  Let us look at each of the default
    icons provided by the editor and determine the meaning behind the picture.

Unshifted F1 through F10:

Fn	  Function
Key Icon    Name			   Description
--- ---- ---------- -----------------------------------------------------------
F1: Ã?´ HELP	    A request for "help" with editing (or use HELP command).
F2: ÍÍ SELECT	    Select text for some subsequent operation.
F3: XÍÍ CUT	    Cut or remove selected text (or use CUT command).
F4: [] MODE	    Switch from editing to entry of commands and vice versa.
F5: >Í- INS_LINE    Insert a blank line at this point (or use INPUT command).
F6: xÍ- DEL_LINE    Delete a single line of text.
F7: ø|ø FIND	    Prompt for search string
F8: øø-> FIND_NEXT  Find next occurrence of string (or use "+\string" command).
F9: Ã´ LINE_UP     Slide window up (or use Alt/ on enhanced keyboards).
F10:Ã´ LINE_DOWN  Slide window down (or use Alt/ on enhanced keyboards).
F11:[C] BORDER	   Select next border colour (or use PAINT command).
F12:°±² LINES	   Select number of lines on screen (EGA: 25 or 43,
		    VGA: 25, 28 or 50, MCGA: 25, 40 or 50).

Shifted F1 through F10:

Fn	  Function
Key Icon    Name			   Description
--- ---- ---------- -----------------------------------------------------------
S1: ÃF´ FOREGROUND  Select next foreground colour (or use PAINT command).
S2: ÃB´ BORDER	    Select next background colour (or use PAINT command).
S3: +ÍÍ PASTE	    Paste previously cut text (or use PASTE command).
S4: [_] COMMAND     Switch from editing to entry of commands.
S5: [Í] FILL_TEXT   Fill selected lines between margins (or use FILL command).
S6: +Í- UNDEL_LINE  Reinsert deleted line of text.
S7: ´Ã SWITCH	    Move to next workspace (or use EDIT command).
S8: <-øø FIND_PREV  Find previous occurrence of string (or use "-\string"
		    command).
S9: Ã<-´ LINE_LEFT  Slide window left (or use Alt/<- on enhanced keyboards).
S10:Ã->´ LINE_RIGHT Slide window right (or use Alt/-> on enhanced keyboards).

Ctrl F1 through F10:

Fn	  Function
Key Icon    Name			   Description
--- ---- ---------- -----------------------------------------------------------
C1: [+] ADD_WINDOW  Add another window to the screen (or use WINDOW command).
C2: [-] DEL_WINDOW  Remove a window from the screen.
C3: [S] SHRINK	    Shrink current or active window (or use WINDOW command).
C4: [G] GROW	    Grow current or active window (or use WINDOW command).
C5: ´NÃ NAMES	    Show names of all workspaces (or use SHOW command).
C6: [] DONE	    Save current workspace if modified and quit (or use DONE
		    command).
C7: """ DITTO       Repeat the last command (or use "?" command).
C8: RUN EXECUTE     Execute the program in the current workspace
C9: «Ù HALF_UP     Move back 1/2 page
C10:«¿ HALF_DOWN   Move ahead 1/2 page

Other Icons:

	  Function
    Icon    Name			   Description
    ---- ---------- -----------------------------------------------------------
    [] PREV_WINDOW Move to previous window on screen
    [] NEXT_WINDOW Move to following window on screen
    [] REFRESH     Redisplay windows on screen
    ³<-Í PREV_INDENT Shift lines to previous tab stop
    Í->³ NEXT_INDENT Shift lines to next tab stop
    ÚÄ¿ TOF	    Position to top of workspace
    ÀÄÙ EOF	    Position to end of workspace
    ÀÙ PAGE_UP     Move to previous page
    Ú¿ PAGE_DOWN   Move to following page
::::INPUT

   Syntax:	<line-id>Input <text>
		<line-id>Input

   Description: The INPUT command is used to enter text into the current
		workspace from the keyboard.  If a <line-id> is specified then
		text is entered after that line.  If text follows the command,
		it is inserted into the workspace and the cursor remains in
		the "command entry" area.  If no text follows the command then
		the cursor moves to the "text entry" area and switches to
		half-height indicating "text insertion mode".  To return to the
		command entry area, press the "Modify/Command" function key
		(F4).

   Examples:	i	    Enter input mode just after the current line.
		3i	    Enter input mode after the third line in
			    the current workspace.
		i This text is inserted after the current line.
			    The text following the command "i" is inserted
			    into the workspace after the current line.	The
			    single space before the word "This" is not
			    considered to be a part of the input text.
::::KEYS
Key	Unshifted	Shift		 Ctrl		  Alt
ÄÄÄ  ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ	ÄÄÄÄÄÄÄÄÄÄ
F1   Help	      Foreground       Add window	definable
F2   Select	      Background       Delete window	definable
F3   Cut	      Paste	       Shrink window	definable
F4   Edit/Command     Command	       Grow window	definable
F5   Insert Line      Fill text        Show names	definable
F6   Delete Line      Undelete Line    Done		definable
F7   Find	      Switch	       Ditto		definable
F8   Find next	      Find previous    Execute		definable
F9   Line up	      Line left        1/2 PgUp 	definable
F10  Line down	      Line right       1/2 PgDn 	definable
F11* Border colour    n/a	       n/a		n/a
F12* Screen lines     n/a	       n/a		n/a
Ins  Insert/Overtype		       Add window*	Paste*
Del  Delete character		       Delete window*	Cut*
Home Start of line    Start of text    Refresh windows	1st Line*
End  End of line		       Erase to end	Last Line*
PgUp Previous page		       Up window	1/2 PgUp*
PgDn Next page			       Down window	1/2 PgDn*
ÿÿÿÿUpÿ1ÿlineÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿShrinkÿwindow*ÿÿÿLineÿup*
ÿÿÿÿDownÿ1ÿlineÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿÿGrowÿwindow*ÿÿÿÿÿLineÿdown*
<-   Left 1 char      Left 1 word      Shift text left	Line left*
->   Right 1 char     Right 1 word     Shift text right Line right*

Note: Certain key combinations are not available on older model PCs.  These
      keys are available on the IBM Enhanced keyboard and are marked with an
      asterisk (*).  Alt/- can also be used for "start of text".  Alt/= can
      be used to find a matching delimiter from the set "(){}[]<>".
::::LIST

   Syntax:	<line-range>

   Description: Text may be viewed ("listed") simply by specifying the range
		of text to be listed.  In other words, the "list" command is
		the default command if no other is given.  The current line
		is set to the last line in the line range.

		In the special case where <line-range> is not specified
		(i.e., the "return" key is pressed), the next line in the
		workspace is displayed (and becomes the new current line).

   Examples:	*	    List the entire workspace.	The current line
			    becomes $.
		1	    List the first line and set the current line to
			    that line.
		1,.	    List all lines from the first line to the current
			    line.  The current line remains the same.
::::MARGIN

   Syntax:	MARgin <mar>

   Description: The MARGIN command allows you to set the left margin of the
		text to be displayed in the editing window.  For example, if
		the margin is set to 10 then columns 10, 11, 12, etc. are
		displayed in the window.  Text to the left of column 10 will
		not be displayed.  The MARGIN command allows you to select
		which portion of the lines in the workspace is to be
		displayed.

   Examples:	margin +9   Adjust the left margin up by 9.
		margin -12  Adjust the left margin down by 12.
		marg 15     Set the left margin to 15.
::::MESSAGE

   Syntax:	MESsage <message>

   Description: The MESSAGE command allows you to display a message in the
		message area of the screen.  The message will remain until
		an editor function is performed.  This command is quite
		useful for issuing informational messages from within command
		files (see the description of the "@" command).

   Examples:	message Meeting on Tuesday at 3:00 with Anne
			    Place a new message on the message line.
		mes Assignment due tomorrow, Nov. 12
			    Place a new message on the message line.
		mess C keyboard macros now defined
			    Place a new message on the message line.
::::MOUSE

   Syntax:	MOUse <ON|OFF>

   Description: The MOUSE command can be used to activate or deactivate use of
		a mouse.  When "OFF" is specified, mouse use is deactivated;
		otherwise mouse use is enabled (provided that a mouse driver
		program is installed in the system).

		When the mouse is activated, editing icons are displayed at
		the bottom of the screen.  Most actions are selected by
		"clicking" the mouse at the desired location.  This is done by
		moving the mouse cursor, the solid rectangle on the screen,
		to a place on the screen and then pressing the left-hand
		button on the mouse.

		For example, the action associated with an Icon is selected by
		positioning the mouse cursor on the desired Icon and pressing
		the left-hand button on the mouse.

		The text cursor can be positioned in any window by clicking
		the mouse at the desired location in the window.  Text may be
		scrolled up one line at a time by clicking on the bottom of
		the window.  Text may be scrolled down one line at a time by
		clicking on the top of the window.  Text may be scrolled up or
		down, left or right by "dragging" the mouse.  This is done by
		pressing the left-hand button on the mouse and, without
		releasing the button, moving the mouse.

		Line selection mode is started by "double-clicking" the
		left-hand mouse button.  Double-clicking is done by pressing
		the left-hand mouse button twice at the same location without
		moving the mouse cursor.  A third click in the same spot will
		turn off selection.

		The right-hand button (and middle button if your mouse has
		three buttons) can inherit a function associated with any
		mouse Icon simply by positioning the mouse cursor on the Icon
		and pressing the right-hand button.  From that point on, the
		right-hand button can be pressed any time the mouse cursor is
		not on an Icon to activate the inherited function.  Functions
		such as "line insert", "line split", "text fill", and "edit
		next workspace" could be assigned to the right-hand button
		when they are repeated frequently.

   Note:	In order to use a mouse, you must install the IBM Mouse Driver
		program that is supplied with the IBM Mouse.  Alternatively,
		you may use a mouse and mouse driver that are compatible with
		the IBM Mouse and IBM Mouse Driver.  The IBM Mouse Driver is
		installed by running the "MOUSE.COM" program.

		Example: C>\DOS\MOUSE
::::NAME

   Syntax:	Name <ws-name>

   Description: The NAME command sets or displays the current workspace name
		which the PUT and EXIT commands use as the default filename.
		When no <ws-name> is specified the current workspace name is
		displayed.  When <ws-name> is specified, the current workspace
		name is changed.  Note: The names of all workspaces may be
		displayed using the SHOW command.

   Examples:	name xref   The current workspace name is changed to "xref".
		name	    The current workspace name is displayed.
::::NEW_FEATURES

    For a description of recent enhancements to the editor, read the "Read
    Me First" document that is provided with the software.  This document
    is provided in both printed and machine-readable form.  The file
    "README.1ST" which is included on the software diskettes can be read
    at the terminal or printed on a printer.

::::PAINT

   Syntax:	PAInt <window> <fg> <bg> <bd>

   Description: The PAINT command allows you to define the foreground,
		background, and border colours for a window.
		<window> is 1, 2, 3
			or "*" (meaning all windows)
			or "^" (meaning the first window, i.e., window 1)
			or "." (meaning the current window)
			or "$" (meaning the last window, i.e., window 3)
		<fg> is the foreground colour in the range 0 to 15
			or "." (meaning the current colour)
		<bg> is the background colour in the range 0 to 15
			or "." (meaning the current colour)
		<bd> is the border colour in the range 0 to 63
			or "." (meaning the current colour)

		The maximum number of available colours for each of the
		foreground, background and border will depend on the type
		of display adapter present in the system.  The ranges listed
		are those for the IBM PS/2 Video Graphics Array.  The border
		colour is displayed only when the window is active.

		On the IBM Monochrome Display and Printer Adapter (MDPA),
		the specified numbers represent normal, bright, blinking and
		underline attributes.

   Examples:	paint 1 7 0 1
		    For window 1, the foreground colour is 7, the background
		    colour is 0 and the border colour is 1.  The actual colour
		    selection depends on how the palette registers are set.
		paint 2 7 1
		    For window 2, the foreground colour is 7, the background
		    colour is 1 and the border colour is unspecified.
		paint . . . 3
		    For the current window, the foreground and background
		    colours are retained but the border colour is set to 3.
::::PASTE

   Syntax:	<line-id>PASte <ws-name>
		<line-id>PASte

   Description: The PASTE command causes the entire contents of the specified
		workspace to be inserted following the line specified by
		<line-id>.  If <line-id> is not specified then the current
		line is assumed.  If no workspace name is specified then the
		"scrap" workspace (".scrap.") is assumed.  The contents of the
		specified (source) workspace are unchanged.  It is illegal to
		"paste" the current workspace into the current workspace.

   Examples:	$pas buffer   Insert a copy of the workspace named "buffer"
			      after the last line in the current workspace.
		paste	      Insert a copy of the contents of the "scrap"
			      workspace after the current line.
		paste	      Insert a second copy of the contents of the
			      "scrap" workspace after the current line.
::::PATTERNS
			  Pattern Matching
			  ßßßßßßßßßßßßßßßß
    A search string is simply a character string for which the editor searches
    in the workspace or in the current line.  Search strings are typically
    enclosed in slashes ("/") although the closing slash may be omitted if it
    is the last character on the command line and no blanks immediately
    precede it.  The special search string "//" represents the last non-null
    search string that was used in any command.

    There are some character sequences (known as meta-characters) which have
    special meanings.  These are:

	%/	represents a "/".
	%^	represents the beginning of a line.
	%@	an alternate representation for the beginning of line (provided
		for keyboards that do not have the '^' character).
	%$	represents the end of a line.
	%.	represents any character.
	%*	represents zero or more repetitions of the character which
		immediately precedes the "%*".
	%(n)	represents column number "n".  This notation may be used to
		refer to a particular column in a line.  Column 0 occurs before
		the first character in a line, column 1 follows the first
		character, column 2 follows the second character, and so on.
	%(-n)	represents the "n" column from the end of the line.  The end of
		the line occurs immediately after the last non-blank character
		in a line.  This notation may be used to refer to a column
		relative to the end of a line.	Column -0 occurs at the end of
		a line.  Column -1 occurs before the last character in a line,
		column -2 precedes the second last character, and so on.  Note
		that %$ and %(-0) are equivalent.
	%%	represents a "%".

    There are two additional meta-characters which apply only to the
    replacement text in a CHANGE command.

	%&	represents the text that was matched by the search string of
		the CHANGE command (if any).
	%#	represents the line number of the line that is being operated
		upon.

    Examples:
	/%^abc/     represents "abc" occurring at the beginning of a line.
	/a%*bc/     represents 0 or more "a"'s followed by "bc" ("bc", "abc",
		    "aabc", "aaabc", ...).
	/a%.c/	    represents an "a" followed by any character, followed by a
		    "c" ("aac", "abc", "acc", "adc", ...).
	/ab%.%*d/   represents "ab" followed by any string of any  length
		    (including the empty string) followed by a "d" ("abd",
		    "abcd", "abbd", "abeeed", ...).
	/%^%.%*%$/  represents all the characters in the line.
	/%(40)a/    represents the letter "a" in column 41.
	/%(0)abc/   represents the letters "abc"  starting in column 1 and is
		    equivalent to /%^abc/ shown above.
	/%(50)%.%*%$/	represents all characters from column 51 to the end of
			the line.
::::PF

   Syntax:	PF <number> <text>

   Description: The PF command may be used to assign strings to 58 alternate
		keys.  The first 10 keys are obtained by pressing both the Alt
		key and one of function keys F1 through F10.  The next 10
		keys are obtained by pressing both the Alt key and one of the
		numeric keys 1, 2, ..., 9 or 0 in the top row of the
		typewriter area (the numeric keypad may not be used for this
		purpose).  The remaining 38 keys are obtained by pressing both
		the Alt key and one of the keys A through Z or one of the
		keys marked [];',./\ or Enter.

		<number> is a number from 1 to 58 that selects the alternate
		key to be defined.  Alt/F1 through Alt/F10 are defined using
		numbers 1 through 10.  Alt/1 through Alt/0 are defined using
		numbers 11 through 20.	Alt/Q through Alt// are defined using
		numbers 21 through 58.

		 F1 F2 F3 F4 F5 F6 F7 F8 F9 F10      -	1 to 10
		   1 2 3 4 5 6 7 8 9 0		     - 11 to 20
		    Q W E R T Y U I O P [ ] Enter    - 21 to 33
		     A S D F G H J K L ; ' `         - 35 to 46
		    \ Z X C V B N M , . /	     - 48 to 58

		<text> is a string of text.  It may contain special control
		sequences which are converted to single character values.
		Control sequences must take one of the following forms:
		<acc> where "acc" is a valid mnemonic for the 32 ASCII
		      control codes (e.g., CR, VT, FF) or SP for the space
		      character.
		<ddd> where "ddd" is a valid decimal number representing a
		      value from 0 to 255.
		<$hh> where "hh" is a valid hexadecimal number representing
		      a value from "00" to "FF".

		If an alternate key is not defined then a beeping sound is
		produced by the computer.  An area of 512 bytes is set aside
		for the text assigned to alternate keys.  The current
		assignments are shown by entering "PF" with no operands.

		When the value <255> (<$FF>) is specified, the next value
		in the sequence is treated as a key number.  The value must
		correspond to a valid IBM scan code (key number).  For a list
		of IBM scan codes for the U.S. keyboard, see the topic
		"SCAN_CODES".  This permits the simulation of single and
		multiple key presses.

   Examples:	pf 1 exit<cr>
		    Sets the Alt/F1 key combination to produce the string
		    "exit" followed by a carriage return.
		pf 2 Procedure(<sp>
		    Sets the Alt/F2 key combination to produce the string
		    "Procedure(" followed by a blank.
		pf 11 help keys<cr>
		    Sets the Alt/1 key combination to produce the string
		    "help keys" followed by a carriage return.
		pf 20 <228>
		    Sets the Alt/0 key combination to produce the "ä"
		    character.
		pf 55 <255><77><255><77>
		    Sets the Alt/M key combination to produce two CURSOR RIGHT
		    keys.
::::PUT

   Syntax:	<line-range>Put <file-name>

   Description: The PUT command copies all the lines specified by <line-range>
		into the file specified by <file-name>.  If <line-range> is not
		specified then the entire workspace is copied (equivalent to
		"*p <file-name>").  If <file-name> is not specified then the
		current workspace name is used and hence must be defined (i.e.,
		it must not be ".no_name.").

   Examples:	p demo	    Put the entire workspace into the file named
			    "demo".  If the file "demo" exists, the editor
			    will ask you to confirm the replacement of the
			    file.
		put	    Put the entire workspace into a file whose name
			    is the same as the workspace name.	The previous
			    contents of a file on disk with that same name
			    are lost.
		.,.+2p temp Put the 3 lines identified by the line-range
			    into the file named "temp".  If the file "temp"
			    exists, the editor will ask you to confirm the
			    replacement of the file.
::::QUIT

   Syntax:	QUIT

   Description: The QUIT command is used to abandon the current workspace.
		The current workspace is removed from the computer's memory
		and the next workspace is entered.  If there are no more
		workspaces then the editor returns to the invoking system.
		If the workspace has been altered and not stored in a file
		since the alteration then the user is not informed.  This
		command is provided as a means of leaving a workspace after
		it has been modified without storing the modified workspace
		in a file.
::::RENAME

   Syntax:	REName <file-spec-1> <file-name-2>

   Description: The RENAME command causes the file specified by <file-spec-1>
		to have its name changed to <file-name-2>.  DOS path ("\") and
		global filename characters ("*" and "?") may be used to
		specify one or more files to be renamed.

   Examples:	ren test oldtest
			    Rename the file "test" to the name "oldtest".
		ren b:mark.* grade.*
			    Rename all files on the DOS "B:" disk drive that
			    have a filename of "mark" to have a filename
			    starting with "grade".
::::RUN

   Syntax:	RUN

   Description: When the editor is being used in conjunction with a language
		processor, the RUN command executes the program.  When used
		in the editor alone, the RUN command causes the editor to
		process the commands in the "profile" file (see also the
		description of the "@" command).
::::SCAN_CODES
    The keycodes for the IBM Enhanced keyboard (U.S. model) are:
    Escape ........... (1) 1 ................ (2) 2 ................ (3)
    3 ................ (4) 4 ................ (5) 5 ................ (6)
    6 ................ (7) 7 ................ (8) 8 ................ (9)
    9 ............... (10) 0 ............... (11) - ............... (12)
    = ............... (13) Backspace ....... (14) Tab ............. (15)
    Q ............... (16) W ............... (17) E ............... (18)
    R ............... (19) T ............... (20) Y ............... (21)
    U ............... (22) I ............... (23) O ............... (24)
    P ............... (25) [ ............... (26) ] ............... (27)
    Enter ........... (28) U29 ............. (29) A ............... (30)
    S ............... (31) D ............... (32) F ............... (33)
    G ............... (34) H ............... (35) J ............... (36)
    K ............... (37) L ............... (38) ; ............... (39)
    ' ............... (40) ` ............... (41) U42 ............. (42)
    \ ............... (43) Z ............... (44) X ............... (45)
    C ............... (46) V ............... (47) B ............... (48)
    N ............... (49) M ............... (50) , ............... (51)
    . ............... (52) / ............... (53) U54 ............. (54)
    * ............... (55) U56 ............. (56) SPACE Bar ....... (57)
    U58 ............. (58) F1 .............. (59) F2 .............. (60)
    F3 .............. (61) F4 .............. (62) F5 .............. (63)
    F6 .............. (64) F7 .............. (65) F8 .............. (66)
    F9 .............. (67) F10 ............. (68) U69 ............. (69)
    U70 ............. (70) Home ............ (71) Cursor Up ....... (72)
    Page Up ......... (73) Numeric - ....... (74) Cursor Left ..... (75)
    Numeric 5 ....... (76) Cursor Right .... (77) Numeric + ....... (78)
    End ............. (79) Cursor Down ..... (80) Page Down ....... (81)
    Insert .......... (82) Delete .......... (83) Shift/F1 ........ (84)
    Shift/F2 ........ (85) Shift/F3 ........ (86) Shift/F4 ........ (87)
    Shift/F5 ........ (88) Shift/F6 ........ (89) Shift/F7 ........ (90)
    Shift/F8 ........ (91) Shift/F9 ........ (92) Shift/F10 ....... (93)
    Ctrl/F1 ......... (94) Ctrl/F2 ......... (95) Ctrl/F3 ......... (96)
    Ctrl/F4 ......... (97) Ctrl/F5 ......... (98) Ctrl/F6 ......... (99)
    Ctrl/F7 ........ (100) Ctrl/F8 ........ (101) Ctrl/F9 ........ (102)
    Ctrl/F10 ....... (103) Alt/F1 ......... (104) Alt/F2 ......... (105)
    Alt/F3 ......... (106) Alt/F4 ......... (107) Alt/F5 ......... (108)
    Alt/F6 ......... (109) Alt/F7 ......... (110) Alt/F8 ......... (111)
    Alt/F9 ......... (112) Alt/F10 ........ (113) Ctrl/PrtSc ..... (114)
    Ctrl/Cursor .... (115) Ctrl/Cursor .... (116) Ctrl/End ....... (117)
    Ctrl/Page Down . (118) Ctrl/Home ...... (119) Alt/1 .......... (120)
    Alt/2 .......... (121) Alt/3 .......... (122) Alt/4 .......... (123)
    Alt/5 .......... (124) Alt/6 .......... (125) Alt/7 .......... (126)
    Alt/8 .......... (127) Alt/9 .......... (128) Alt/0 .......... (129)
    Alt/- .......... (130) Alt/= .......... (131) Ctrl/Page Up ... (132)
    F11 ............ (133) F12 ............ (134) Shift/F11 ...... (135)
    Shift/F12 ...... (136) Ctrl/F11 ....... (137) Ctrl/F12 ....... (138)
    Alt/F11 ........ (139) Alt/F12 ........ (140) Ctrl/Cursor Up . (141)
    Ctrl/- ......... (142) Ctrl/5 ......... (143) Ctrl/+ ......... (144)
    Ctrl/Cursor Down (145) Ctrl/Insert .... (146) Ctrl/Delete .... (147)
    Ctrl/Tab ....... (148) Ctrl/SLASH ..... (149) Ctrl/* ......... (150)
    Alt/Home ....... (151) Alt/Cursor Up .. (152) Alt/Page Up .... (153)
    U154 ........... (154) Alt/Cursor Left  (155) U156 ........... (156)
    Alt/Cursor Right (157) U158 ........... (158) Alt/End ........ (159)
    Alt/Cursor Down  (160) Alt/Page Down .. (161) Alt/Ins ........ (162)
    Alt/Delete ..... (163) Alt/Slash ...... (164) Alt/Tab ........ (165)
    Alt/Enter ...... (166) Numeric / ...... (224) Numeric Enter .. (224)

    The Unnn keys are values for which there is no known key assignment.
    Values 133 to 166 are generated by the IBM Enhanced keyboard only.
    These numbers can be used in escape sequences when defining programmable
    function key strings using the PF command.	For example,
	    PF 1 <255><133>
    would set Alt/F1 to simulate the F11 key.  For more information, see the
    description of the PF command.
::::SEARCH

   Syntax:	/<search-string>/	\<search-string>\
		+/<search-string>/	+\<search-string>\
		-/<search-string>/	-\<search-string>\

   Description: A line containing a specific string of text may be located
		by specifying a search string.	There are three general ways
		to locate a line that contains a specific string.  They are:

		/string/  Locate the first line in the workspace containing
			  the text "string".
		+/string/ Locate the next occurrence of the text "string"
			  following the current line.
		-/string/ Locate the previous occurrence of the text
			  "string" before the current line.

		If "\" is used instead, the search is done in a
		case-insensitive manner.  Thus, "string", "STRING", "String",
		"sTrInG", etc.	would be located.

		The trailing "/" is optional but must be present if a
		command is specified following the search command.

   Examples:	/text/	    Locate the first line in the workspace containing
			    the string "text".
		+/computer/ Locate the next line (following the current
			    line) in the workspace containing the string
			    "computer".
		+\next\ change*/line/lines
			    Locate the next line in the workspace containing
			    the string "next" (regardless of case) and change
			    all occurrences of "line" to "lines" in that line.
			    Instances of "LINE", "Line", etc. would remain
			    unchanged.
::::SHOW

   Syntax:	SHow

   Description: The SHOW command displays the names of all workspaces
		currently being edited.  The "scrap" workspace is denoted by
		the name ".scrap.".  An unnamed workspace is denoted by
		".no_name.".  The current workspace is indicated by the ">"
		symbol to the left of the name.

   Examples:	show	    test.dat
			    test1.dat
			    .scrap.
			   >scroll.asm
			    srxoff.asm
::::SNOW

   Syntax:	SNOw <ON|OFF>

   Description: The SNOW command enables or disables the vertical retrace
		delay on adapters when writing to video memory directly.
		The omission of this delay will speed up display output.
		By default, the delay is enabled ("ON") for CGA adapters
		and disabled ("OFF") for all others.  On some systems
		equipped with CGA adapters, this delay is not required.

		The current setting is displayed when no argument is
		specified.

   Examples:	snow on
		    This will cause the editor to wait for the vertical
		    retrace period before updating video memory.
		sno off
		    This will prevent the editor from waiting for the vertical
		    retrace period before updating video memory.
		snow
		    Display the current setting of the snow option.
::::SYSTEM

   Syntax:	SYStem <command>

   Description: The SYSTEM command may be used to run other commands or
		programs without destroying the editor environment.  If a
		<command> is entered, that command is executed by the
		operating system and control returns to the editor.  If
		<command> is omitted, DOS is invoked.  Commands may be
		entered until a DOS "EXIT" command is entered.	The DOS "EXIT"
		command terminates DOS and returns control to the editor.
		Note: There must be enough unused memory in the computer to
		run the specified program or DOS.

		Any modified workspaces are written to disk under the names
		"AUTOSAVE.nnn" where "nnn" ranges from 0 on up before the
		command is issued.

   Examples:	sys cset.com  Attempt to run the program "cset.com".
		sys	      Attempt to invoke DOS.
		sys chdir asmsrc
			      Change the current directory to "asmsrc".
			      DOS will be invoked to execute the "chdir"
			      command.
::::TABSET

   Syntax:	TABset <tab-1> <tab-2> <tab-3> ... <tab-n>

   Description: The TABSET command sets or displays the current tab stops.
		You may define a different set of tab stops while using the
		editor.  Up to 20 tab stops may be defined.  Tab stops apply to
		particular columns of the text in the workspace; not physical
		columns on the screen.	It is therefore possible to set tab
		stops as high as 254.  When tabbing to a column which is not
		currently displayed on the screen, the editor will scroll text
		to the left or right depending on the direction of the tab.

		When only one tab stop is specified, a tab stop is defined for
		every n'th column.

		The tab settings can be restored to the default of one
		every eight columns by setting a single tab stop of 0.

   Examples:	tab 1 7 11 15 19 23
		   This command will redefine the default tab stops (but only
		   while you are using the editor).  When you return to DOS,
		   they will revert back to the default.  Additional tab stops
		   or other ones can be defined according to preference but
		   all tab stops must be defined in one use of the TABSET
		   command (i.e., you can neither add or remove individual tab
		   stops; they must all be set at the same time).
		tab 4
		   This command causes tab stops to be defined every 4 columns.
		   Tab stops are set for columns 1, 5, 9, 13, 17, etc.
		tab 0
		   Reset the tab stops back to the default (e.g., 1, 9, 17,
		   etc.).  The word "Default" is displayed in the message area.
::::TIME

   Syntax:	TIMe

   Description: The TIME command is identical to the DATE command except
		that only the time is displayed.
::::TOPICS
 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´ Editor Help ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 ³ Help is available on the following Editor topics.  To obtain help on   ³
 ³ a particular topic, enter the topic name at the "Topic?" prompt.	  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³  !		  #		=	      ? 	    @		  ³
 ³  APPend	  AUTosave	BACkup	      BELl	    BINd	  ³
 ³  BYE 	  CANcel	Change	      COMpress	    CSET	  ³
 ³  CURsor	  CUT		DATe	      DElete	    DIrectory	  ³
 ³  DONe	  Edit		ERAse	      EXit	    explanations  ³
 ³  Fill	  Get		Help	      icons	    Input	  ³
 ³  keys	  list		MARgin	      MESSage	    MOUse	  ³
 ³  Name	  new_features	PAInt	      PASte	    patterns	  ³
 ³  PF		  Put		QUIT	      REName	    RUN 	  ³
 ³  scan_codes	  search	SHow	      SNOw	    SYStem	  ³
 ³  TABset	  TIMe		topics	      WATCOM	    WINdow	  ³
 ³  WRAp	  WTALK 						  ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
::::WATCOM

			Problems, Suggestions, etc.
			ßßßßßßßßßßßßßßßßßßßßßßßßßßß

      Although a significant amount of testing has gone into this product,
      errors in the software may be encountered.  You may also discover errors
      or omissions in the documentation.  If you find any problems or have some
      good suggestions, we would like to hear from you.

      You can contact us by writing to:
		WATCOM Systems Inc.,
		415 Phillip Street,
		Waterloo, Ontario,
		CANADA	   N2L 3X2
	or Telephone:	519-886-3700
	or FAX: 	519-747-4971
	or Telex:	06-955458
::::WINDOW

   Syntax:	WINdow <window> <start> <end>

   Description: The WINDOW command allows you to position the command window
		and define up to 3 different editing windows.
		<window> is 0, 1, 2 or 3
		<start> is the starting line number
			or "^" (meaning the first available line)
			or "." (meaning the current value)
			or "$" (meaning the last available line)
		<end> is the ending line number
			or "^" (meaning the first available line)
			or "." (meaning the current value)
			or "$" (meaning the last available line)

		For window 0, the command window, the only possible placements
		are "^" for top of screen or "$" for bottom of screen.

		Function keys Ctrl/Page Up and Ctrl/Page Down may be used to
		move among windows.  Ctrl/Insert (or Ctrl/F1) and Ctrl/Delete
		(or Ctrl/F2) may be used to add or delete windows (window
		sizes are automatically calculated).  Ctrl/ (or Ctrl/F3) and
		Ctrl/ (or Ctrl/F4) may be used to shrink or grow the current
		window (try also HELP KEYS).

   Examples:	window 1 ^  10
		window 2 11 $
		    Define two windows.  The first ranges from the top to line
		    10 on the screen; the second ranges from line 11 to the
		    last line.
		winD 3 1 $
		    A third window is defined that will cover windows 1 and
		    2 when it is active.
		win 1
		    When no other operands are specified, the editor simply
		    moves to the requested window.
		win 0 ^
		    Place command window near top of screen.
		win 0 $
		    Place command window near bottom of screen.
::::WRAP

   Syntax:	WRAp <column>

   Description: The WRAP command will cause the editor to wrap input text
		to a new line whenever the cursor moves from column <column>
		into column <column>+1.  If <column> is not specified then the
		current setting is displayed.

   Example:	wrap 68

		This will cause the editor to wrap input text to a new line
		whenever the cursor moves from column 68 into column 69.
::::WTALK

   Syntax:	WTALK <terminal-options>

   Description: This program may be used to communicate with host computer
		systems over the serial port.  It emulates a "dumb" ASCII
		terminal.  It may be run from the DOS command line.  To run
		from the editor, type "SYS WTALK etc.".  WTALK was written
		by WATCOM Systems Inc.	and is provided on the editor
		diskette.

   Examples:	wtalk term com 1 speed 9600 parity none word 8 echo remote
		    Set serial port 1 speed to 9600, parity to none, word
		    length to 8 bits, remote echo and enter terminal emulation.
		wtalk
		    Set communication options interactively using pull-down
		    menus and/or enter terminal emulation.
::::~~~DEFAULT
 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´ Editor Help ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 ³ Help is available on the following Editor topics.  To obtain help on   ³
 ³ a particular topic, enter the topic name at the "Topic?" prompt.	  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³  !		  #		=	      ? 	    @		  ³
 ³  APPend	  AUTosave	BACkup	      BELl	    BINd	  ³
 ³  BYE 	  CANcel	Change	      COMpress	    CSET	  ³
 ³  CURsor	  CUT		DATe	      DElete	    DIrectory	  ³
 ³  DONe	  Edit		ERAse	      EXit	    explanations  ³
 ³  Fill	  Get		Help	      icons	    Input	  ³
 ³  keys	  list		MARgin	      MESSage	    MOUse	  ³
 ³  Name	  new_features	PAInt	      PASte	    patterns	  ³
 ³  PF		  Put		QUIT	      REName	    RUN 	  ³
 ³  scan_codes	  search	SHow	      SNOw	    SYStem	  ³
 ³  TABset	  TIMe		topics	      WATCOM	    WINdow	  ³
 ³  WRAp	  WTALK 						  ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
